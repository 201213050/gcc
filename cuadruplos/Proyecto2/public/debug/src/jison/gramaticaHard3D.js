/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaHard3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,29],$V2=[1,30],$V3=[1,10],$V4=[1,31],$V5=[1,8],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,11],$Vi=[1,12],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,55],$Vn=[1,50],$Vo=[5,43,44,45,50,52,60,78,83,92,93,94,96,98,100,103,105,109,114,115,135,137,139,141,142],$Vp=[1,65],$Vq=[58,67],$Vr=[2,77],$Vs=[1,69],$Vt=[1,67],$Vu=[1,71],$Vv=[5,43,44,45,50,52,60,63,78,83,88,90,92,93,94,96,98,100,103,105,109,114,115,135,137,139,141,142],$Vw=[14,48,49,50,55],$Vx=[2,66],$Vy=[2,69],$Vz=[1,88],$VA=[1,89],$VB=[1,85],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,110],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35,48,57,58,59,67],$VN=[1,132],$VO=[48,49,59],$VP=[2,54],$VQ=[1,153],$VR=[1,154],$VS=[1,155],$VT=[1,156],$VU=[1,157],$VV=[20,31,32,33,34,35,48,57,59],$VW=[1,165],$VX=[1,166],$VY=[1,167],$VZ=[1,168],$V_=[1,169],$V$=[1,170],$V01=[12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35,48,57,59],$V11=[2,19],$V21=[12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35,48,49,57,59],$V31=[1,184],$V41=[2,125],$V51=[49,55],$V61=[20,59],$V71=[1,218],$V81=[12,13,20,25,26,27,28,29,30,31,32,33,34,35,48,57,59],$V91=[63,88,90],$Va1=[43,44,45,50,52,63,78,83,88,90,92,93,94,96,98,100,103,105,109,135,137,139,141,142],$Vb1=[1,267],$Vc1=[2,117],$Vd1=[1,272],$Ve1=[12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35,48,55,57,58,59,67],$Vf1=[1,283],$Vg1=[1,285],$Vh1=[20,31,32,33,34,48,57,59],$Vi1=[20,33,34,48,57,59],$Vj1=[12,13,14,15,16,20,25,26,27,28,29,30,31,32,33,34,35,48,57,59],$Vk1=[43,44,45,50,52,60,63],$Vl1=[20,48],$Vm1=[20,54,55,59],$Vn1=[63,90],$Vo1=[1,370];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPOSTAR":4,"EOF":5,"CUERPOS":6,"CUERPO":7,"ELEMENTO":8,"METODO":9,"SENTENCIA":10,"EXPA":11,"+":12,"-":13,"*":14,"/":15,"%":16,"^":17,"(":18,"EXPL":19,")":20,"DATO":21,"FUNCIONESNATIVAS":22,"ACCESO":23,"EXPR":24,"==":25,"!=":26,">":27,">=":28,"<":29,"<=":30,"&&":31,"&?":32,"||":33,"|?":34,"|&":35,"!":36,"num":37,"str":38,"bool":39,"null":40,"DATOELEMENT":41,"tipoDato":42,"numero":43,"cadena":44,"booleano":45,"DECLARACION":46,"LISTAIDS":47,";":48,":":49,"id":50,"create":51,"array":52,"DIMENSION":53,"of":54,"[":55,"VALORDIM":56,"]":57,".":58,",":59,"element":60,"{":61,"SENTENCIASELEMENTSTAR":62,"}":63,"SENTENCIASELEMENT":64,"SENTENCIAELEMENT":65,"ASIGNACION":66,"=":67,"LLAMADAMETODO":68,"ACCESORECUR":69,"LLAMADA":70,"TIPOACCESO":71,"ACCESOID":72,"ACCESOARRAY":73,"VALORPARAMETROSTAR":74,"VALORPARAMETROS":75,"INDICEARRAY":76,"CONTROLIF":77,"if":78,"then":79,"SENTENCIASTAR":80,"else":81,"CONTROLSWITCH":82,"switch":83,"CASOSTAR":84,"DEFECTO":85,"CASOS":86,"CASO":87,"case":88,"VALORCASE":89,"default":90,"BRANCHING":91,"break":92,"continue":93,"return":94,"CICLOWHILE":95,"while":96,"CICLODOWHILE":97,"do":98,"CICLOREPEATUNTIL":99,"repeat":100,"until":101,"CICLOLOOP":102,"loop":103,"CICLOCOUNT":104,"count":105,"CICLODOWHILEX":106,"whilex":107,"CICLOFOR":108,"for":109,"VARIABLEFOR":110,"SIMPLIFICADA":111,"PARAMETROSTAR":112,"SIMBOLOARRAY":113,"void":114,"Principal":115,"PARAMETROS":116,"PARAMETRO":117,"SENTENCIAS":118,"METODOSNATIVOS":119,"NATIVATHROWS":120,"TIPOMETODO":121,"STRSIMPLIFICADA":122,"NATIVAGETBOOL":123,"getBool":124,"NATIVAGETNUM":125,"getNum":126,"NATIVAINNUM":127,"inNum":128,"NATIVAGETRANDOM":129,"getRandom":130,"NATIVAGETLENGTH":131,"getLength":132,"NATIVAGETLENGTHCAD":133,"NATIVAOUTSTR":134,"outStr":135,"NATIVAOUTNUM":136,"outNum":137,"NATIVAINSTR":138,"inStr":139,"NATIVASHOW":140,"show":141,"throws":142,"EXCEPCION":143,"NullPointerException":144,"MissingReturnStatement":145,"ArithmeticException":146,"StackOverFlowException":147,"HeapOverFlowException":148,"PoolOverFlowException":149,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"+",13:"-",14:"*",15:"/",16:"%",17:"^",18:"(",20:")",25:"==",26:"!=",27:">",28:">=",29:"<",30:"<=",31:"&&",32:"&?",33:"||",34:"|?",35:"|&",36:"!",37:"num",38:"str",39:"bool",40:"null",43:"numero",44:"cadena",45:"booleano",48:";",49:":",50:"id",51:"create",52:"array",54:"of",55:"[",57:"]",58:".",59:",",60:"element",61:"{",63:"}",67:"=",78:"if",79:"then",81:"else",83:"switch",88:"case",90:"default",92:"break",93:"continue",94:"return",96:"while",98:"do",100:"repeat",101:"until",103:"loop",105:"count",107:"whilex",109:"for",114:"void",115:"Principal",124:"getBool",126:"getNum",128:"inNum",130:"getRandom",132:"getLength",135:"outStr",137:"outNum",139:"inStr",141:"show",142:"throws",144:"NullPointerException",145:"MissingReturnStatement",146:"ArithmeticException",147:"StackOverFlowException",148:"HeapOverFlowException",149:"PoolOverFlowException"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[7,1],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,3],[11,1],[11,1],[11,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[21,1],[21,1],[21,1],[21,1],[41,1],[41,1],[42,1],[42,1],[42,1],[46,3],[46,5],[46,5],[46,8],[46,3],[46,7],[53,4],[53,3],[56,1],[56,4],[47,3],[47,1],[8,6],[62,1],[62,0],[64,2],[64,1],[65,1],[65,1],[66,4],[66,7],[68,4],[68,2],[23,1],[69,3],[69,1],[71,1],[71,1],[71,1],[70,4],[74,1],[74,0],[75,3],[75,1],[72,1],[73,2],[76,4],[76,3],[77,8],[77,12],[82,10],[84,1],[84,0],[86,2],[86,1],[87,4],[85,3],[85,0],[89,1],[89,3],[91,2],[91,3],[91,2],[91,2],[91,3],[95,7],[97,8],[99,8],[102,5],[104,7],[106,10],[108,11],[110,4],[110,3],[111,3],[111,3],[9,9],[9,10],[9,9],[9,9],[9,6],[113,3],[113,2],[112,1],[112,0],[116,3],[116,1],[117,2],[117,3],[117,2],[117,3],[80,1],[80,0],[118,2],[118,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[121,1],[121,1],[121,1],[122,1],[123,4],[125,8],[127,6],[129,3],[131,6],[133,4],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[134,4],[136,6],[138,6],[140,4],[119,2],[119,2],[119,2],[119,2],[120,5],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        reiniciar();
        console.log($$[$0-1]+"//ultima linea");
        return $$[$0-1]; 
      
break;
case 2:

                    this.$=$$[$0];
                
break;
case 3:

                    this.$=crearNodo("cuerpo",1,1);
                
break;
case 4: case 118:

                this.$.add($$[$0]);
            
break;
case 5:

                this.$=crearNodo("cuerpo",_$[$0].first_line,_$[$0].first_column);
                this.$.add($$[$0]);
            
break;
case 6: case 7: case 8: case 40: case 41: case 42: case 56: case 69: case 70: case 71: case 73: case 84: case 116: case 124: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 153: case 154: case 155: case 156: case 157: case 158:
this.$=$$[$0];
break;
case 9:

            this.$=crearNodo("+",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 10:

            this.$=crearNodo("-",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 11:

            this.$=crearNodo("*",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 12:

            this.$=crearNodo("/",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 13:

            this.$=crearNodo("%",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 14:

            this.$=crearNodo("^",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 15:

            this.$=crearNodo("unario",_$[$0-1].first_line,_$[$0-1].first_column);  
            this.$.add($$[$0]);
        
break;
case 16:

            this.$=$$[$0-1];
        
break;
case 17: case 18: case 19: case 26: case 33: case 38:

            this.$=$$[$0];
        
break;
case 20:

            this.$=crearNodo("==",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 21:

            this.$=crearNodo("!=",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 22:

            this.$=crearNodo(">",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 23:

            this.$=crearNodo(">=",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 24:

            this.$=crearNodo("<",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 25:

            this.$=crearNodo("<=",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 27:

            this.$=crearNodo("&&",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);   
        
break;
case 28:

            this.$=crearNodo("&?",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 29:

            this.$=crearNodo("||",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 30:

            this.$=crearNodo("|?",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 31:

            this.$=crearNodo("|&",_$[$0-1].first_line,_$[$0-1].first_column);
            this.$.add($$[$0-2]);
            this.$.add($$[$0]);
        
break;
case 32:

            this.$=crearNodo("!",_$[$0-1].first_line,_$[$0-1].first_column);  
            this.$.add($$[$0]);
        
break;
case 34:

            this.$=crearHoja("num",Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
        
break;
case 35:

            var cad=$$[$0];
            cad=cad.substring(1,cad.length-1);
            this.$=crearHoja("str",cad,_$[$0].first_line,_$[$0].first_column);
        
break;
case 36:
   if($$[$0]=="true"){
                this.$=crearHoja("bool",true,_$[$0].first_line,_$[$0].first_column);
            }else{
                this.$=crearHoja("bool",false,_$[$0].first_line,_$[$0].first_column);
            }        

        
break;
case 37: case 39:

            this.$=crearHoja("null",$$[$0],_$[$0].first_line,_$[$0].first_column);
        
break;
case 43:

                    this.$=crearNodo('primitivaD',_$[$0-2].first_line,_$[$0-2].first_column);   
                    var tipo1=crearHoja('tipo',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add(tipo1) 
                    this.$.add($$[$0-1]);
                
break;
case 44:

                    this.$=crearNodo('primitivaDA',_$[$0-4].first_line,_$[$0-4].first_column); 
                    var tipo1=crearHoja('tipo',$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
                    this.$.add(tipo1);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                
break;
case 45:

                    this.$=crearNodo('elementDD',_$[$0-4].first_line,_$[$0-4].first_column); 
                    var tipo1=crearHoja('tipo',$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
                    this.$.add(tipo1);
                    var lista=crearNodo('listaIds',_$[$0-3].first_line,_$[$0-3].first_column);
                    var nodo=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    lista.add(nodo);
                    this.$.add(lista);
                    //var tipo2=crearHoja('tipo',$$[$01],_$[$01].first_line,_$[$01].first_column);
                    this.$.add($$[$0-1]);
                
break;
case 46:
//57083071 Jorge Guerra
                    this.$=crearNodo('elementDI',_$[$0-7].first_line,_$[$0-7].first_column); 
                    var tipo1=crearHoja('tipo',$$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column);
                    this.$.add(tipo1);
                    var lista=crearNodo('listaIds',_$[$0-6].first_line,_$[$0-6].first_column);
                    var nodo=crearHoja('id',$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
                    lista.add(nodo);
                    this.$.add(lista);
                    var tipo2=crearHoja('tipo',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add(tipo2);
                
break;
case 47:

                    this.$=crearNodo('elementD',_$[$0-2].first_line,_$[$0-2].first_column); 
                    var tipo1=crearHoja('tipo',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add(tipo1);
                    this.$.add($$[$0-1]);
                
break;
case 48:

                    this.$=crearNodo('array',_$[$0-6].first_line,_$[$0-6].first_column);
                    var nodo=crearHoja('id',$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);
                    this.$.add(nodo);
                    this.$.add($$[$0-3]);
                    var tipo1=crearHoja('tipo',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    this.$.add(tipo1);
                
break;
case 49: case 79:

                this.$.add($$[$0-1]);
            
break;
case 50:

                this.$=crearNodo('dimensiones',_$[$0-1].first_line,_$[$0-1].first_column);
                this.$.add($$[$0-1]);
            
break;
case 51:

                this.$=crearNodo('dimension',_$[$0].first_line,_$[$0].first_column);
                var inf=crearHoja('inf',0,_$[$0].first_line,_$[$0].first_column);
                var sup=crearHoja('sup',Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
                this.$.add(inf);
                this.$.add(sup);
            
break;
case 52:

                this.$=crearNodo('dimension',_$[$0-3].first_line,_$[$0-3].first_column);
                var inf=crearHoja('inf',Number($$[$0-3]),_$[$0-3].first_line,_$[$0-3].first_column);
                var sup=crearHoja('sup',Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
                this.$.add(inf);
                this.$.add(sup);
            
break;
case 53:

                var nodo=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column);
                this.$.add(nodo);
            
break;
case 54:
   
                this.$=crearNodo("listaIds",_$[$0].first_line,_$[$0].first_column);
                var nodo=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column);
                this.$.add(nodo);
            
break;
case 55:

                this.$=crearNodo("element",_$[$0-5].first_line,_$[$0-5].first_column);
                var nodo=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                this.$.add(nodo);
                this.$.add($$[$0-1]);
            
break;
case 57:
this.$=crearNodo("sentenciasElement",1,1);
break;
case 58: case 75: case 126:

                        this.$.add($$[$0]);
                    
break;
case 59:

                        this.$=crearNodo("sentenciasElement",_$[$0].first_line,_$[$0].first_column);
                        this.$.add($$[$0]);   
                    
break;
case 60: case 61:

                        this.$=$$[$0];
                    
break;
case 62:

                    this.$=crearNodo('asignacion',_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                
break;
case 63:

                    this.$=crearNodo('asignacionElement',_$[$0-6].first_line,_$[$0-6].first_column);
                    this.$.add($$[$0-6]);
                    var tipo2=crearHoja('tipo',$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);  
                    this.$.add(tipo2);
                
break;
case 64:

                    this.$.add($$[$0-1]);
                
break;
case 65:

                    this.$=$$[$0-1];
                
break;
case 66: case 91:

                this.$=$$[$0];
            
break;
case 67:

                    this.$.add($$[$0]);
                
break;
case 68:

                    this.$=crearNodo('acceso',_$[$0].first_line,_$[$0].first_column);
                    this.$.add($$[$0]);
                
break;
case 72:

                this.$=crearNodo('llamada',_$[$0-3].first_line,_$[$0-3].first_column);
                var nodoId=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column); 
                this.$.add(nodoId);   
                this.$.add($$[$0-1]);
            
break;
case 74:
this.$=crearNodo('valorParametros',1,1);
break;
case 76:

                        this.$=crearNodo('valorParametros',_$[$0].first_line,_$[$0].first_column);
                        this.$.add($$[$0]);
                    
break;
case 77:

            this.$=crearNodo('accesoId',_$[$0].first_line,_$[$0].first_column);
            var nodoId=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column); 
            this.$.add(nodoId);
        
break;
case 78:

                this.$=crearNodo('accesoArray',_$[$0-1].first_line,_$[$0-1].first_column); 
                var nodoId=crearHoja('id',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
                this.$.add(nodoId);
                this.$.add($$[$0]);
            
break;
case 80:

                this.$=crearNodo('indiceArray',_$[$0-2].first_line,_$[$0-2].first_column); 
                this.$.add($$[$0-1]);
            
break;
case 81:

                this.$=crearNodo('if',_$[$0-7].first_line,_$[$0-7].first_column);
                this.$.add($$[$0-5]);
                this.$.add($$[$0-1]);
                var sentElse=crearNodo('sentencias',1,1);
                this.$.add(sentElse);
            
break;
case 82:

                    this.$=crearNodo('ifElse',_$[$0-11].first_line,_$[$0-11].first_column);
                    this.$.add($$[$0-9]);
                    this.$.add($$[$0-5]);
                    this.$.add($$[$0-1]);       
                
break;
case 83:

                    this.$=crearNodo('switch',_$[$0-9].first_line,_$[$0-9].first_column); 
                    var modo=null;
                    if($$[$0-5]=="true"){
                        modo=crearHoja('modo',true,_$[$0-5].first_line,_$[$0-5].first_column); 
                    }else{
                        modo=crearHoja('modo',false,_$[$0-5].first_line,_$[$0-5].first_column); 
                    }
                    this.$.add($$[$0-7])
                    this.$.add(modo);
                    $$[$0-2].add($$[$0-1]);
                    this.$.add($$[$0-2]);

                
break;
case 85:
this.$=crearNodo('casos',1,1);
break;
case 86:

            this.$.add($$[$0]);
        
break;
case 87:

            this.$=crearNodo('casos',_$[$0].first_line,_$[$0].first_column);  
            this.$.add($$[$0]);
        
break;
case 88:

        this.$=crearNodo('case',_$[$0-3].first_line,_$[$0-3].first_column);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 89:

                this.$=crearNodo('default',_$[$0-2].first_line,_$[$0-2].first_column);
                var nodo=crearHoja('default','default',_$[$0-2].first_line,_$[$0-2].first_column);
                this.$.add(nodo);
                this.$.add($$[$0]);
            
break;
case 90:

                this.$=crearNodo('default',1,1);
                var sent=crearNodo('sentencias',1,1);
                var nodo=crearHoja('default','default',1,1);
                this.$.add(nodo);
                this.$.add(sent);
            
break;
case 92:

                this.$=crearNodo('rango',_$[$0-2].first_line,_$[$0-2].first_column);
                this.$.add($$[$0-2]);
                this.$.add($$[$0]);
            
break;
case 93:

                this.$=crearHoja('break',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
            
break;
case 94:

                this.$=crearNodo('breakId',_$[$0-2].first_line,_$[$0-2].first_column);
                var nodo=crearHoja('id',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                this.$.add(nodo);
            
break;
case 95:

                this.$=crearHoja('continue',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
            
break;
case 96:

                this.$=crearHoja('return',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
            
break;
case 97:

                this.$=crearNodo('return',_$[$0-2].first_line,_$[$0-2].first_column);
                this.$.add($$[$0-1]);
            
break;
case 98:

                    this.$=crearNodo('while',_$[$0-6].first_line,_$[$0-6].first_column);  
                    this.$.add($$[$0-4]);
                    this.$.add($$[$0-1]); 
                
break;
case 99:

                    this.$=crearNodo('doWhile',_$[$0-7].first_line,_$[$0-7].first_column);  
                    this.$.add($$[$0-1]);
                    this.$.add($$[$0-5]); 
                
break;
case 100:

                    this.$=crearNodo('repeatUntil',_$[$0-7].first_line,_$[$0-7].first_column);  
                    this.$.add($$[$0-1]);
                    this.$.add($$[$0-5]); 
                
break;
case 101:

                this.$=crearNodo('loop',_$[$0-4].first_line,_$[$0-4].first_column);
                var nodo=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                this.$.add(nodo);
                this.$.add($$[$0-1]);
            
break;
case 102:

                    this.$=crearNodo('count',_$[$0-6].first_line,_$[$0-6].first_column);  
                    this.$.add($$[$0-4]);
                    this.$.add($$[$0-1]); 
                
break;
case 103:

                    this.$=crearNodo('doWhilex',_$[$0-9].first_line,_$[$0-9].first_column);  
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    this.$.add($$[$0-7]); 
                
break;
case 104:

                this.$=crearNodo('for',_$[$0-10].first_line,_$[$0-10].first_column);   
                this.$.add($$[$0-8]);
                this.$.add($$[$0-6]);
                this.$.add($$[$0-4]);
                this.$.add($$[$0-1]);
            
break;
case 105:

                    this.$=crearNodo('primitivaDA',_$[$0-3].first_line,_$[$0-3].first_column); 
                    var tipo1=crearHoja('tipo',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add(tipo1);
                    var lista=crearNodo('listaIds',_$[$0-2].first_line,_$[$0-2].first_column);
                    var nodo=crearHoja('id',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    lista.add(nodo);
                    this.$.add(lista);
                    this.$.add($$[$0]);
                
break;
case 106:

                    this.$=crearNodo('asignacionFor',_$[$0-2].first_line,_$[$0-2].first_column);
                    //var nodo=crearHoja('id',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add($$[$0-2]);
                    this.$.add($$[$0]);
                
break;
case 107:

                    this.$=crearNodo('simplificada',_$[$0-2].first_line,_$[$0-2].first_column);
                    var nodoId=crearHoja('id',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add(nodoId);
                    var nodoTipo=crearHoja('aumento','++',_$[$0-1].first_line,_$[$0-1].first_column);
                    this.$.add(nodoTipo);
                
break;
case 108:

                    this.$=crearNodo('simplificada',_$[$0-2].first_line,_$[$0-2].first_column);
                    var nodoId=crearHoja('id',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                    this.$.add(nodoId);
                    var nodoTipo=crearHoja('decremento','--',_$[$0-1].first_line,_$[$0-1].first_column);
                    this.$.add(nodoTipo);
                
break;
case 109: case 111:

                    this.$=crearNodo('metodo',_$[$0-8].first_line,_$[$0-8].first_column);
                    var tipo1=crearHoja('tipo',$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
                    var nodo=crearHoja('id',$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
                    this.$.add(tipo1);
                    this.$.add(nodo);
                    this.$.add($$[$0-4]);
                    this.$.add($$[$0-1]);
                
break;
case 110:

                    this.$=crearNodo('metodoArray',_$[$0-9].first_line,_$[$0-9].first_column);
                    var tipo1=crearHoja('tipo',$$[$0-9],_$[$0-9].first_line,_$[$0-9].first_column);
                    var dim=crearHoja('dimension',$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
                    var nodo=crearHoja('id',$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
                    this.$.add(tipo1);
                    this.$.add(nodo);
                    this.$.add($$[$0-4]);
                    this.$.add($$[$0-1]);
                    this.$.add(dim);
                
break;
case 112:

                this.$=crearNodo('metodo',_$[$0-8].first_line,_$[$0-8].first_column);
                var tipo1=crearHoja('tipo',$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column);
                var nodo=crearHoja('id',$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
                this.$.add($$[$0-4]);
                this.$.add($$[$0-1]);
            
break;
case 113:

                this.$=crearNodo('metodo',_$[$0-5].first_line,_$[$0-5].first_column);
                var tipo1=crearHoja('tipo','void',_$[$0-5].first_line,_$[$0-5].first_column);
                var nodo=crearHoja('id',$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
                var par=crearNodo('parametros',1,1);
                this.$.add(par);
                this.$.add($$[$0-1]);
            
break;
case 114:

                    this.$=this.$+1;
                
break;
case 115:

                    this.$=1;
                
break;
case 117:
this.$=crearNodo('parametros',1,1);
break;
case 119:

                this.$=crearNodo('parametros',_$[$0].first_line,_$[$0].first_column);
                this.$.add($$[$0]);
            
break;
case 120:

                this.$=crearNodo('parametroVal',_$[$0-1].first_line,_$[$0-1].first_column);
                var tipo1=crearHoja('tipo',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                var nodo=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
            
break;
case 121:

                this.$=crearNodo('parametroRef',_$[$0-2].first_line,_$[$0-2].first_column);
                var tipo1=crearHoja('tipo',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                var nodo=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
            
break;
case 122:

                this.$=crearNodo('parametroElement',_$[$0-1].first_line,_$[$0-1].first_column);
                var tipo1=crearHoja('tipo',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                var nodo=crearHoja('id',$$[$0],_$[$0].first_line,_$[$0].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
            
break;
case 123:

                this.$=crearNodo('parametroArray',_$[$0-2].first_line,_$[$0-2].first_column);
                var tipo1=crearHoja('tipo',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                var nodo=crearHoja('id',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                this.$.add(tipo1);
                this.$.add(nodo);
                this.$.add($$[$0]);
            
break;
case 125:
this.$=crearNodo('sentencias',1,1);
break;
case 127:

                        this.$=crearNodo('sentencias',_$[$0].first_line,_$[$0].first_column);
                        this.$.add($$[$0]);
                    
break;
case 146:

            var cad=$$[$0];
            cad=cad.substring(1,cad.length-1);
            this.$=cad;
        
break;
case 147:

                    this.$=crearNodo('getBool',_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add($$[$0-1]);
                    //var nodo=crearHoja('str',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodo);
                
break;
case 148:

                    this.$=crearNodo('getNum',_$[$0-7].first_line,_$[$0-7].first_column);
                    this.$.add($$[$0-5]);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    //var nodoValor=crearHoja('str',$$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column);
                    //this.$.add(nodoValor);
                    //var nodoBase=crearHoja('base',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    //this.$.add(nodoBase);
                    //var nodoDefault=crearHoja('default',Number($$[$0-1]),_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodoDefault);
                
break;
case 149:

                    this.$=crearNodo('inNum',_$[$0-5].first_line,_$[$0-5].first_column);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    //var nodoMsg=crearHoja('str',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    //this.$.add(nodoMsg);
                    //var nodoDefault=crearHoja('num',Number($$[$0-1]),_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodoDefault);
                
break;
case 150:

                    this.$=crearHoja('getRandom',$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
                
break;
case 151:

                    this.$=crearNodo('getLength',_$[$0-5].first_line,_$[$0-5].first_column);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    //var nodoId=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    //this.$.add(nodoId);
                    //var nodoDim=crearHoja('num',Number($$[$0-1]),_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodoDim);
                
break;
case 152:

                    this.$=crearNodo('getLengthCad',_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add($$[$0-1]);
                    //var nodoStr=crearHoja('str',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodoStr);
                
break;
case 159:

                    this.$=crearNodo('outStr',_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add($$[$0-1]);
                    //var nodo=crearHoja('str',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodo);
                
break;
case 160:

                    this.$=crearNodo('outNum',_$[$0-5].first_line,_$[$0-5].first_column);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    /*var nodoValor=crearHoja('num',Number($$[$0-3]),_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add(nodoValor);
                    var nodoComoEntero=null;
                    if($$[$0-1]=="true"){
                        nodoComoEntero=crearHoja('bool',true,_$[$0-1].first_line,_$[$0-1].first_column);
                    }else{
                        nodoComoEntero=crearHoja('bool',false,_$[$0-1].first_line,_$[$0-1].first_column);
                    }
                    this.$.add(nodoComoEntero);*/
                
break;
case 161:

                    this.$=crearNodo('inStr',_$[$0-5].first_line,_$[$0-5].first_column);
                    this.$.add($$[$0-3]);
                    this.$.add($$[$0-1]);
                    //var nodoId=crearHoja('id',$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
                    //this.$.add(nodoId);
                    //this.$.add($$[$0-3]);
                    //var nodoMsg=crearHoja('str',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodoMsg);
                
break;
case 162:

                    this.$=crearNodo('show',_$[$0-3].first_line,_$[$0-3].first_column);
                    this.$.add($$[$0-1]);
                    //var nodo=crearHoja('str',$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
                    //this.$.add(nodo);
                
break;
case 163: case 164: case 165: case 166:
this.$=$$[$0-1];
break;
case 167:

                    this.$=crearNodo('throws',_$[$0-4].first_line,_$[$0-4].first_column);
                    this.$.add($$[$0-2]);
                
break;
case 168:

                this.$=crearHoja('excepcion',102,_$[$0].first_line,_$[$0].first_column);
            
break;
case 169:

                this.$=crearHoja('excepcion',243,_$[$0].first_line,_$[$0].first_column);
            
break;
case 170:

                this.$=crearHoja('excepcion',396,_$[$0].first_line,_$[$0].first_column);
            
break;
case 171:

                this.$=crearHoja('excepcion',624,_$[$0].first_line,_$[$0].first_column);
            
break;
case 172:

                {
                this.$=crearHoja('excepcion',789,_$[$0].first_line,_$[$0].first_column);
            }
            
break;
case 173:

                this.$=crearHoja('excepcion',801,_$[$0].first_line,_$[$0].first_column);
            
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:7,23:32,42:9,43:$V0,44:$V1,45:$V2,46:13,50:$V3,52:$V4,60:$V5,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,114:$Vh,115:$Vi,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{1:[3]},{5:[1,58]},{5:[2,2],7:59,8:5,9:6,10:7,23:32,42:9,43:$V0,44:$V1,45:$V2,46:13,50:$V3,52:$V4,60:$V5,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,114:$Vh,115:$Vi,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),{49:[1,60]},{47:63,49:[1,61],50:$Vp,55:[1,64],113:62},o($Vq,$Vr,{47:68,76:70,18:$Vs,49:[1,66],50:$Vt,55:$Vu}),{49:[1,72]},{18:[1,73]},o($Vv,[2,128]),o($Vv,[2,129]),o($Vv,[2,130]),o($Vv,[2,131]),o($Vv,[2,132]),o($Vv,[2,133]),o($Vv,[2,134]),o($Vv,[2,135]),o($Vv,[2,136]),o($Vv,[2,137]),o($Vv,[2,138]),o($Vv,[2,139]),o($Vv,[2,140]),o($Vv,[2,141]),o($Vv,[2,142]),o($Vw,[2,40]),o($Vw,[2,41]),o($Vw,[2,42]),{49:[1,74]},{67:[1,75]},{58:[1,76],67:$Vx},o($Vq,$Vy,{48:[1,77]}),{18:[1,78]},{18:[1,79]},{48:[1,80],50:[1,81]},{48:[1,82]},{11:87,13:$Vz,18:$VA,19:84,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,48:[1,83],50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{18:[1,111]},{61:[1,112]},{61:[1,113]},{50:[1,114]},{18:[1,115]},{18:[1,116]},{48:[1,117]},{48:[1,118]},{48:[1,119]},{48:[1,120]},{18:[1,121]},o($VM,[2,68]),{18:[1,122]},{18:[1,123]},{18:[1,124]},{18:[1,125]},o($VM,[2,70]),o($VM,[2,71]),{1:[2,1]},o($Vo,[2,4]),{50:[1,126]},{50:[1,127]},{49:[1,128],55:[1,129]},{48:[1,130],49:[1,131],59:$VN},{57:[1,133]},o($VO,$VP),{50:[1,134]},o([48,59],$VP,{49:[1,135]}),{48:[1,136],59:$VN},{11:87,13:$Vz,18:$VA,19:139,20:[2,74],21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,74:137,75:138,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($VM,[2,78],{55:[1,140]}),{11:87,13:$Vz,18:$VA,19:141,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{50:[1,142]},{20:[1,143]},{50:[1,144]},{11:87,13:$Vz,18:$VA,19:145,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,51:[1,146],69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{50:$VG,70:147,71:148,72:56,73:57},o($Vv,[2,65]),{11:87,13:$Vz,18:$VA,19:149,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:150,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($Vv,[2,93]),{48:[1,151]},o($Vv,[2,95]),o($Vv,[2,96]),{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,48:[1,152]},{11:87,13:$Vz,18:$VA,19:158,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($VV,[2,33]),o($VV,[2,26],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$,25:[1,159],26:[1,160],27:[1,161],28:[1,162],29:[1,163],30:[1,164]}),{11:171,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:172,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($V01,[2,17]),o($V01,[2,18]),o($V01,$V11),o($V21,[2,34]),o($V21,[2,35]),o($V21,[2,36]),o($V21,[2,37]),o($V01,[2,153]),o($V01,[2,154]),o($V01,[2,155]),o($V01,[2,156]),o($V01,[2,157]),o($V01,[2,158]),o([12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35,48,57,59,67],$Vx,{58:[1,173]}),{18:[1,174]},{18:[1,175]},{18:[1,176]},{18:[1,177]},{18:[1,178]},o($VM,$Vy),o($VM,$Vr,{76:70,18:$Vs,55:$Vu}),{11:87,13:$Vz,18:$VA,19:179,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:180,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:185,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{61:[1,186]},{11:87,13:$Vz,18:$VA,19:187,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{23:190,42:189,43:$V0,44:$V1,45:$V2,50:$VG,69:103,70:109,71:51,72:56,73:57,110:188},o($Vv,[2,163]),o($Vv,[2,164]),o($Vv,[2,165]),o($Vv,[2,166]),{143:191,144:[1,192],145:[1,193],146:[1,194],147:[1,195],148:[1,196],149:[1,197]},{11:87,13:$Vz,18:$VA,19:198,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:199,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{23:200,50:$VG,69:103,70:109,71:51,72:56,73:57},{11:87,13:$Vz,18:$VA,19:201,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{61:[1,202]},{18:[1,203]},{50:[1,204]},{57:[1,205]},o($Vv,[2,43]),{11:87,13:$Vz,18:$VA,19:206,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{50:[1,207]},o($V51,[2,115]),{18:[1,208]},{11:87,13:$Vz,18:$VA,19:209,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,51:[1,210],69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($Vv,[2,47]),{20:[1,211]},{20:[2,73],59:[1,212]},o($V61,[2,76],{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU}),{11:87,13:$Vz,18:$VA,19:213,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,57:[1,214]},{18:[1,215]},{61:[1,216]},{53:217,55:$V71},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,48:[1,219]},{18:[1,220]},o($Vq,$Vy,{48:[1,221]}),o($VM,[2,67]),{20:[1,222],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,223]},o($Vv,[2,94]),o($Vv,[2,97]),{11:87,13:$Vz,18:$VA,19:224,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:225,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:226,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:227,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:228,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($VV,[2,32]),{11:229,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:230,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:231,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:232,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:233,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:234,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:235,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:236,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:237,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:238,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:239,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:240,13:$Vz,18:$VA,21:90,22:91,23:92,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($V81,[2,15],{14:$VY,15:$VZ,16:$V_,17:$V$}),{20:[1,241],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{50:$VG,70:109,71:148,72:56,73:57},{11:87,13:$Vz,18:$VA,19:242,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:243,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:244,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{20:[1,245]},{11:87,13:$Vz,18:$VA,19:247,21:90,22:91,23:246,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{20:[1,248],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{63:[1,249]},o($V91,[2,124],{46:13,66:14,68:15,77:16,82:17,91:18,95:19,97:20,99:21,102:22,104:23,106:24,108:25,119:26,120:27,23:32,69:33,70:34,134:46,136:47,138:48,140:49,71:51,72:56,73:57,42:183,10:250,43:$V0,44:$V1,45:$V2,50:$V31,52:$V4,78:$V6,83:$V7,92:$V8,93:$V9,94:$Va,96:$Vb,98:$Vc,100:$Vd,103:$Ve,105:$Vf,109:$Vg,135:$Vj,137:$Vk,139:$Vl,141:$Vm,142:$Vn}),o($Va1,[2,127]),{47:63,50:$Vp},o($Vq,$Vr,{47:68,76:70,18:$Vs,50:$Vt,55:$Vu}),{63:[1,251]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:252,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{20:[1,253],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{48:[1,254]},{50:[1,255]},{67:[1,256]},{20:[1,257]},{20:[2,168]},{20:[2,169]},{20:[2,170]},{20:[2,171]},{20:[2,172]},{20:[2,173]},{20:[1,258],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,259]},{59:[1,260]},{20:[1,261],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{8:266,42:183,43:$V0,44:$V1,45:$V2,46:265,50:$Vb1,52:$V4,60:$V5,62:262,63:[2,57],64:263,65:264},{20:$Vc1,42:271,43:$V0,44:$V1,45:$V2,50:$Vd1,112:268,116:269,117:270},{18:[1,273]},o($V51,[2,114]),{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,48:[1,274]},o($VO,[2,53]),{20:$Vc1,42:271,43:$V0,44:$V1,45:$V2,50:$Vd1,112:275,116:269,117:270},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,48:[1,276]},{18:[1,277]},o($VM,[2,72]),{11:87,13:$Vz,18:$VA,19:278,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,57:[1,279]},o($Ve1,[2,80]),{20:$Vc1,42:271,43:$V0,44:$V1,45:$V2,50:$Vd1,112:280,116:269,117:270},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:281,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{54:[1,282],55:$Vf1},{37:$Vg1,56:284},o($Vv,[2,62]),{50:[1,286]},o($Vv,[2,64]),{79:[1,287]},{39:[1,288]},o($Vh1,[2,27],{35:$VU}),o($Vh1,[2,28],{35:$VU}),o($Vi1,[2,29],{31:$VQ,32:$VR,35:$VU}),o($Vi1,[2,30],{31:$VQ,32:$VR,35:$VU}),o($VV,[2,31]),o($VV,[2,20],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($VV,[2,21],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($VV,[2,22],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($VV,[2,23],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($VV,[2,24],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($VV,[2,25],{12:$VW,13:$VX,14:$VY,15:$VZ,16:$V_,17:$V$}),o($V81,[2,9],{14:$VY,15:$VZ,16:$V_,17:$V$}),o($V81,[2,10],{14:$VY,15:$VZ,16:$V_,17:$V$}),o($Vj1,[2,11],{17:$V$}),o($Vj1,[2,12],{17:$V$}),o($Vj1,[2,13],{17:$V$}),o($V01,[2,14]),o($V01,[2,16]),{20:[1,289],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,290]},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,291]},o($V01,[2,150]),o([12,13,14,15,16,17,20,25,26,27,28,29,30,31,32,33,34,35],$V11,{59:[1,292]}),{20:[1,293],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{61:[1,294]},{96:[1,295],107:[1,296]},o($Va1,[2,126]),{101:[1,297]},{63:[1,298]},{61:[1,299]},{11:87,13:$Vz,18:$VA,19:300,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{49:[1,301]},{11:87,13:$Vz,18:$VA,19:302,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{48:[1,303]},{48:[2,159]},{11:87,13:$Vz,18:$VA,19:304,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:305,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{48:[2,162]},{63:[1,306]},{8:266,42:183,43:$V0,44:$V1,45:$V2,46:265,50:$Vb1,52:$V4,60:$V5,63:[2,56],65:307},o($Vk1,[2,59]),o($Vk1,[2,60]),o($Vk1,[2,61]),{47:68,50:$Vt},{20:[1,308]},{20:[2,116],59:[1,309]},o($V61,[2,119]),{14:[1,311],50:[1,310]},{50:[1,312]},{20:$Vc1,42:271,43:$V0,44:$V1,45:$V2,50:$Vd1,112:313,116:269,117:270},o($Vv,[2,44]),{20:[1,314]},o($Vv,[2,45]),{50:[1,315]},o($V61,[2,75],{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU}),o($Ve1,[2,79]),{20:[1,316]},{63:[1,317]},{42:318,43:$V0,44:$V1,45:$V2},{37:$Vg1,56:319},{57:[1,320]},{57:[2,51],58:[1,321]},{20:[1,322]},{61:[1,323]},{20:[1,324]},o($V01,[2,147]),{11:87,13:$Vz,18:$VA,19:325,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:326,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:327,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($V01,[2,152]),{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:328,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{18:[1,329]},{18:[1,330]},{18:[1,331]},o($Vv,[2,101]),{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:332,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,48:[1,333]},{11:87,13:$Vz,18:$VA,19:334,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($Vl1,[2,106],{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU}),o($Vv,[2,167]),{20:[1,335],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{20:[1,336],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},o([5,43,44,45,50,52,60,63,78,83,92,93,94,96,98,100,103,105,109,114,115,135,137,139,141,142],[2,55]),o($Vk1,[2,58]),{61:[1,337]},{42:271,43:$V0,44:$V1,45:$V2,50:$Vd1,117:338},o($V61,[2,120],{53:339,55:$V71}),{50:[1,340]},o($V61,[2,122]),{20:[1,341]},{61:[1,342]},{20:[1,343]},{61:[1,344]},o($Vo,[2,113]),{48:[1,345]},{57:[1,346]},o($Vm1,[2,50]),{58:[1,347]},{48:[1,348]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:349,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{61:[1,350]},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,351]},{20:[1,352],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{20:[1,353],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{63:[1,354]},{11:87,13:$Vz,18:$VA,19:355,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:356,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{11:87,13:$Vz,18:$VA,19:357,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},{63:[1,358]},{23:190,42:189,43:$V0,44:$V1,45:$V2,50:$VG,69:103,70:109,71:51,72:56,73:57,110:359},o($Vl1,[2,105],{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU}),{48:[2,160]},{48:[2,161]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:360,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($V61,[2,118]),o($V61,[2,123],{55:$Vf1}),o($V61,[2,121]),{61:[1,361]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:362,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{48:[1,363]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:364,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($Vv,[2,48]),o($Vm1,[2,49]),{37:[1,365]},o($Vv,[2,63]),{63:[1,366]},o($Vn1,[2,85],{84:367,86:368,87:369,88:$Vo1}),{11:87,13:$Vz,18:$VA,19:371,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($V01,[2,149]),o($V01,[2,151]),o($Vv,[2,98]),{20:[1,372],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU,59:[1,373]},{20:[1,374],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},o($Vv,[2,102]),{20:[1,375]},{63:[1,376]},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:377,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},{63:[1,378]},o($Vv,[2,46]),{63:[1,379]},{57:[2,52]},o($Vv,[2,81],{81:[1,380]}),{63:[2,90],85:381,90:[1,382]},o($Vn1,[2,84],{87:383,88:$Vo1}),o($V91,[2,87]),{21:385,37:$VC,38:$VD,39:$VE,40:$VF,89:384},{20:[1,386],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},o($Vv,[2,99]),{11:87,13:$Vz,18:$VA,19:387,21:90,22:91,23:92,24:86,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,50:$VG,69:103,70:109,71:51,72:56,73:57,123:97,124:$VH,125:98,126:$VI,127:99,128:$VJ,129:100,130:$VK,131:101,132:$VL,133:102},o($Vv,[2,100]),{61:[1,388]},o($Vo,[2,109]),{63:[1,389]},o($Vo,[2,111]),o($Vo,[2,112]),{61:[1,390]},{63:[1,391]},{49:[1,392]},o($V91,[2,86]),{49:[1,393]},{13:[1,394],49:[2,91]},o($V01,[2,148]),{20:[1,395],31:$VQ,32:$VR,33:$VS,34:$VT,35:$VU},{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:396,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($Vo,[2,110]),{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:397,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($Vv,[2,83]),{10:182,23:32,42:183,43:$V0,44:$V1,45:$V2,46:13,50:$V31,52:$V4,63:$V41,66:14,68:15,69:33,70:34,71:51,72:56,73:57,77:16,78:$V6,80:398,82:17,83:$V7,91:18,92:$V8,93:$V9,94:$Va,95:19,96:$Vb,97:20,98:$Vc,99:21,100:$Vd,102:22,103:$Ve,104:23,105:$Vf,106:24,108:25,109:$Vg,118:181,119:26,120:27,134:46,135:$Vj,136:47,137:$Vk,138:48,139:$Vl,140:49,141:$Vm,142:$Vn},o($V91,$V41,{46:13,66:14,68:15,77:16,82:17,91:18,95:19,97:20,99:21,102:22,104:23,106:24,108:25,119:26,120:27,23:32,69:33,70:34,134:46,136:47,138:48,140:49,71:51,72:56,73:57,118:181,10:182,42:183,80:399,43:$V0,44:$V1,45:$V2,50:$V31,52:$V4,78:$V6,83:$V7,92:$V8,93:$V9,94:$Va,96:$Vb,98:$Vc,100:$Vd,103:$Ve,105:$Vf,109:$Vg,135:$Vj,137:$Vk,139:$Vl,141:$Vm,142:$Vn}),{21:400,37:$VC,38:$VD,39:$VE,40:$VF},o($Vv,[2,103]),{63:[1,401]},{63:[1,402]},{63:[2,89]},o($V91,[2,88]),{49:[2,92]},o($Vv,[2,104]),o($Vv,[2,82])],
defaultActions: {58:[2,1],192:[2,168],193:[2,169],194:[2,170],195:[2,171],196:[2,172],197:[2,173],258:[2,159],261:[2,162],335:[2,160],336:[2,161],365:[2,52],398:[2,89],400:[2,92]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }


                console.log("______________");
                addError("Sintactico","Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'")),yylineno+1,yyloc.first_column);
                
                console.log(errStr);
                console.log("______________");
                
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function parseError2(str, hash){
    console.log("--------------------------");
    console.log(str+"  "+hash);
    console.log("--------------------------");
}





/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return;
break;
case 2:return;
break;
case 3:return 43;
break;
case 4:return 44;
break;
case 5:return 45;
break;
case 6:return 14;
break;
case 7:return 15;
break;
case 8:return 16;
break;
case 9:return 13;
break;
case 10:return 12;
break;
case 11:return 17;
break;
case 12:return 25;
break;
case 13:return 28;
break;
case 14:return 30;
break;
case 15:return 27;
break;
case 16:return 29;
break;
case 17:return 26;
break;
case 18:return 33;
break;
case 19:return 34;
break;
case 20:return 31;
break;
case 21:return 32;
break;
case 22:return 35;
break;
case 23:return 36;
break;
case 24:return 18;
break;
case 25:return 20;
break;
case 26:return 59;
break;
case 27:return 48;
break;
case 28:return 67;
break;
case 29:return 49;
break;
case 30:return 58;
break;
case 31:return 61;
break;
case 32:return 63;
break;
case 33:return 55;
break;
case 34:return 57;
break;
case 35:return 40;
break;
case 36:return 52;
break;
case 37:return 54;
break;
case 38:return 60;
break;
case 39:return 51;
break;
case 40:return 78;
break;
case 41:return 79;
break;
case 42:return 81;
break;
case 43:return 83;
break;
case 44:return 88;
break;
case 45:return 90;
break;
case 46:return 92;
break;
case 47:return 93;
break;
case 48:return 94;
break;
case 49:return 96;
break;
case 50:return 107;
break;
case 51:return 98;
break;
case 52:return 100;
break;
case 53:return 101;
break;
case 54:return 109;
break;
case 55:return 103;
break;
case 56:return 105;
break;
case 57:return 114;
break;
case 58:return 115;
break;
case 59:return 124;
break;
case 60:return 126;
break;
case 61:return 135;
break;
case 62:return 137;
break;
case 63:return 139;
break;
case 64:return 128;
break;
case 65:return 141;
break;
case 66:return 130;
break;
case 67:return 132;
break;
case 68:return 96;
break;
case 69:return 142;
break;
case 70:return 144;
break;
case 71:return 145;
break;
case 72:return 146;
break;
case 73:return 147;
break;
case 74:return 148;
break;
case 75:return 149;
break;
case 76:return 37;
break;
case 77:return 'entero';
break;
case 78:return 39
break;
case 79:return 38
break;
case 80:return 38
break;
case 81:return 38
break;
case 82:return 38
break;
case 83:return 50;
break;
case 84:return 'letra';
break;
case 85:return 5;
break;
case 86:addError("Lexico",yy_.yytext,(yy_.yylloc.first_line-1),yy_.yylloc.first_column);console.log("Error lexico encontrado "+yy_.yytext+" Linea: "+(yy_.yylloc.first_line-1)+" columna: "+yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:¿¿[^'*']*\?\?)/,/^(?:%%[^\r\n]*[^\r\n])/,/^(?:num\b)/,/^(?:str\b)/,/^(?:bool\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:&\?)/,/^(?:\|&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?::)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:NULL|null\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:whilex\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:void\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:while\b)/,/^(?:throws\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[a-zA-Z][^''\n]*')/,/^(?:‘[a-zA-Z][^''\n]*’)/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[a-zA-Z]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaHard3D;
exports.Parser = gramaticaHard3D.Parser;
exports.parse = function () { return gramaticaHard3D.parse.apply(gramaticaHard3D, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}